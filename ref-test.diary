p_refref = [0 0; 1 0; 0 1; 1/2 1/2; 0 1/2; 1/2 0];
t_refref = [1 5 6; 2 4 6; 3 4 5; 4 5 6];
npts     = [1;     1;     1;     1;     1;     1];  % number of points in each geometric feature
flist    = [1 0 0; 2 0 0; 3 0 0; 2 3 0; 1 3 0; 1 2 0];
Brefref  = [1 0 0   0 1/2 1/2;
            0 1 0 1/2   0 1/2;
            0 0 1 1/2 1/2   0];
refref2d = struct('p',p_refref,'t',t_refref,'npts',npts,'flist',flist, ...
                     'Brefref',Brefref,'pxfeature',@px_refref1);
p_testref = [0 0; 1.5 0; 2.5 0; 3.5 0; 3.5 1; ...
    2.5 0.7; 1.5 1; 0 1; 1.5 2; 2.5 1.5];
t_testref = [1 2 7; 2 7 6; 2 3 6; 4 3 6; 4 5 6; ...
    10 5 6; 6 10 7; 1 7 8; 8 7 9; 7 9 10];
trimesh(t_testref,p_testref(:,1),p_testref(:,2))
axis([-.3 4 -.3 3])
rr = refref2d

rr = 

            p: [6x2 double]
            t: [4x3 double]
         npts: [6x1 double]
        flist: [6x3 double]
      Brefref: [3x6 double]
    pxfeature: @px_refref1

trimesh(rr.t,rr.p(:,1),rr.p(:,2))
axis([-.2 1.2 -.2 1.2])
help create_refinement
  function [p_ref,t_ref,master_ref,idx_refref,rfht] = ...
     create_refinement(p,t,master,refref)
 
  Create refined mesh using reference refinement refref.
  (p,t) represent the unrefined "master" triangulation,
  where master is the list of triangle indexes that are
  to be refined: the triangles to be refined are
     t(master(i),:), i = 1, ..., length(master).
  The returned items are:
     (p_ref,t_ref) are the triangulation of the refined mesh
     master_ref(i) is the row index into t of the master triangle
          of triangle t_ref(i,:)
     idx_ref(i) is the row index into refref.t identifies
          which sub-triangle of triangle master_ref(i) is t_ref(i,:).
  Note that idx_ref(i) == 0 iff t_ref(i,:) is an unrefined triangle.

master = [1,2,3,4,5,6,7]

master =

     1     2     3     4     5     6     7

[p_ref,t_ref,master_ref,idx_refref,rfht] = ...
create_refinement(p_testref,t_testref,master,rr)
{Error using <a href="matlab:helpUtils.errorDocCallback('plus')" style="font-weight:bold"> + </a>
Matrix dimensions must agree.

Error in <a href="matlab:helpUtils.errorDocCallback('create_refinement', 'C:\Users\David\Dropbox\MATLAB\pde2\noweb\create_refinement.m', 37)" style="font-weight:bold">create_refinement</a> (<a href="matlab: opentoline('C:\Users\David\Dropbox\MATLAB\pde2\noweb\create_refinement.m',37,0)">line 37</a>)
        Tp_rr = refref.p*T' + b';
} 
size(rr.p)

ans =

     6     2

edit create_refinement
[p_ref,t_ref,master_ref,idx_refref,rfht] = ...
create_refinement(p_testref,t_testref,master,rr)

T =

    1.5000    1.5000
         0    1.0000


b =

     0
     0

{Error using <a href="matlab:helpUtils.errorDocCallback('plus')" style="font-weight:bold"> + </a>
Matrix dimensions must agree.

Error in <a href="matlab:helpUtils.errorDocCallback('create_refinement', 'C:\Users\David\Dropbox\MATLAB\pde2\noweb\create_refinement.m', 37)" style="font-weight:bold">create_refinement</a> (<a href="matlab: opentoline('C:\Users\David\Dropbox\MATLAB\pde2\noweb\create_refinement.m',37,0)">line 37</a>)
        Tp_rr = refref.p*T' + b';
} 
help bsxfun
  <strong>bsxfun</strong>  Binary Singleton Expansion Function
    C = <strong>bsxfun</strong>(FUNC,A,B) applies the element-by-element binary operation
    specified by the function handle FUNC to arrays A and B, with singleton
    expansion enabled. FUNC can be one of the following built-in functions:
 
                @plus           Plus
                @minus          Minus
                @times          Array multiply
                @rdivide        Right array divide
                @ldivide        Left array divide
                @power          Array power
                @max            Binary maximum
                @min            Binary minimum
                @rem            Remainder after division
                @mod            Modulus after division
                @atan2	        Four-quadrant inverse tangent
                @hypot	        Square root of sum of squares
                @eq             Equal
                @ne             Not equal
                @lt             Less than
                @le             Less than or equal
                @gt             Greater than
                @ge             Greater than or equal
                @and            Element-wise logical AND
                @or             Element-wise logical OR
                @xor            Logical EXCLUSIVE OR
 
    FUNC can also be a handle to any binary element-wise function not listed
    above. A binary element-wise function in the form of C = FUNC(A,B)
    accepts arrays A and B of arbitrary but equal size and returns output
    of the same size. Each element in the output array C is the result
    of an operation on the corresponding elements of A and B only. FUNC must
    also support scalar expansion, such that if A or B is a scalar, C is the
    result of applying the scalar to every element in the other input array.
 
    The corresponding dimensions of A and B must be equal to each other, or 
    equal to one. Whenever a dimension of A or B is singleton (equal to 
    one), <strong>bsxfun</strong> virtually replicates the array along that dimension to 
    match the other array. In the case where a dimension of A or B is 
    singleton and the corresponding dimension in the other array is zero,
    <strong>bsxfun</strong> virtually diminishes the singleton dimension to zero.
 
    The size of the output array C is equal to
    max(size(A),size(B)).*(size(A)>0 & size(B)>0). For example, if
    size(A) == [2 5 4] and size(B) == [2 1 4 3], then size(C) == [2 5 4 3].
 
    Examples:
 
    Subtract the column means from the matrix A:
      A = magic(5);
      A = bsxfun(@minus, A, mean(A));
 
    Scale each row of A by its maximum absolute value:
      A = rand(5);
      A = bsxfun(@rdivide, A, max(abs(A),[],2));
 
    Compute z(x, y) = x.*sin(y) on a grid:
      x = 1:10;
      y = x.';
      z = bsxfun(@(x, y) x.*sin(y), x, y);
 
    See also <a href="matlab:help repmat">repmat</a>, <a href="matlab:help arrayfun">arrayfun</a>

    Reference page in Help browser
       <a href="matlab:doc bsxfun">doc bsxfun</a>

diary off
