ref_test_script

master =

     1     2     3     4     5     7     8


p_ref =

         0         0
    1.5000         0
    2.5000         0
    3.5000         0
    3.5000    1.0000
    2.5000    0.7000
    1.5000    1.0000
         0    1.0000
    1.5000    2.0000
    2.5000    1.5000
    1.5000    0.5000
    0.7500    0.5000
    0.7500         0
    2.0000    0.8500
    2.0000    0.3500
    2.5000    0.3500
    2.0000         0
    3.0000    0.3500
    3.0000         0
    3.0000    0.8500
    3.5000    0.5000
    2.0000    1.2500
    2.5000    1.1000
    0.7500    1.0000
         0    0.5000


t_ref =

     1    12    13
     2    11    13
     7    11    12
    11    12    13
     2    15    11
     7    14    11
     6    14    15
    14    15    11
     2    15    17
     3    16    17
     6    16    15
    16    15    17
     4    18    19
     3    16    19
     6    16    18
    16    18    19
     4    18    21
     5    20    21
     6    20    18
    20    18    21
    10     5     6
     6    14    23
    10    22    23
     7    22    14
    22    14    23
     1    25    12
     7    24    12
     8    24    25
    24    25    12
     8     7     9
     7     9    10


master_ref =

  Columns 1 through 15

     1     1     1     1     2     2     2     2     3     3     3     3     4     4     4

  Columns 16 through 30

     4     5     5     5     5     6     7     7     7     7     8     8     8     8     9

  Column 31

    10


idx_refref =

     1
     2
     3
     4
     1
     2
     3
     4
     1
     2
     3
     4
     1
     2
     3
     4
     1
     2
     3
     4
     0
     1
     2
     3
     4
     1
     2
     3
     4
     0
     0


rfht = 

  <a href="matlab:help containers.Map">containers.Map</a> <a href="matlab:help handle">handle</a>
  Package: containers

  Properties:
        Count: 15
      KeyType: 'int64'
    ValueType: 'any'

  <a href="matlab:methods('containers.Map')">Methods</a>, <a href="matlab:events('containers.Map')">Events</a>, <a href="matlab:superclasses('containers.Map')">Superclasses</a>


master2rr_pt =

     1     2     7    11    12    13
     2     7     6    14    15    11
     2     3     6    16    15    17
     4     3     6    16    18    19
     4     5     6    20    18    21
    10     5     6     0     0     0
     6    10     7    22    14    23
     1     7     8    24    25    12
     8     7     9     0     0     0
     7     9    10     0     0     0


ans =

Press any key to continue


px_refref2 = 

    @(px)ifte(length(px)==2,px,[1])


p_ref2 =

         0         0
    1.5000         0
    2.5000         0
    3.5000         0
    3.5000    1.0000
    2.5000    0.7000
    1.5000    1.0000
         0    1.0000
    1.5000    2.0000
    2.5000    1.5000
    1.5000    0.3333
    1.5000    0.6667
    0.5000    0.3333
    1.0000    0.6667
    0.5000         0
    1.0000         0
    1.0000    0.3333
    2.1667    0.8000
    1.8333    0.9000
    1.8333    0.2333
    2.1667    0.4667
    1.8333    0.5667
    2.5000    0.2333
    2.5000    0.4667
    1.8333         0
    2.1667         0
    2.1667    0.2333
    3.1667    0.2333
    2.8333    0.4667
    2.8333         0
    3.1667         0
    2.8333    0.2333
    3.1667    0.9000
    2.8333    0.8000
    3.5000    0.3333
    3.5000    0.6667
    3.1667    0.5667
    1.8333    1.1667
    2.1667    1.3333
    2.5000    0.9667
    2.5000    1.2333
    2.1667    1.0667
    1.0000    1.0000
    0.5000    1.0000
         0    0.3333
         0    0.6667
    0.5000    0.6667


t_ref2 =

     1    15    13
    13    15    17
    15    16    17
    16    11    17
    16     2    11
    14    13    17
    17    12    14
    17    11    12
    14    12     7
     2    11    20
    20    11    22
    11    12    22
    12    19    22
    12     7    19
    21    20    22
    22    18    21
    22    19    18
    21    18     6
     2    25    20
    20    25    27
    25    26    27
    26    23    27
    26     3    23
    21    20    27
    27    24    21
    27    23    24
    21    24     6
     4    31    28
    28    31    32
    31    30    32
    30    23    32
    30     3    23
    29    28    32
    32    24    29
    32    23    24
    29    24     6
     4    35    28
    28    35    37
    35    36    37
    36    33    37
    36     5    33
    29    28    37
    37    34    29
    37    33    34
    29    34     6
    10     5     6
     6    40    18
    18    40    42
    40    41    42
    41    39    42
    41    10    39
    19    18    42
    42    38    19
    42    39    38
    19    38     7
     1    13    45
    45    13    47
    13    14    47
    14    43    47
    14     7    43
    46    45    47
    47    44    46
    47    43    44
    46    44     8
     8     7     9
     7     9    10


master_ref2 =

  Columns 1 through 15

     1     1     1     1     1     1     1     1     1     2     2     2     2     2     2

  Columns 16 through 30

     2     2     2     3     3     3     3     3     3     3     3     3     4     4     4

  Columns 31 through 45

     4     4     4     4     4     4     5     5     5     5     5     5     5     5     5

  Columns 46 through 60

     6     7     7     7     7     7     7     7     7     7     8     8     8     8     8

  Columns 61 through 66

     8     8     8     8     9    10


idx_refref2 =

     1
     2
     3
     4
     5
     6
     7
     8
     9
     1
     2
     3
     4
     5
     6
     7
     8
     9
     1
     2
     3
     4
     5
     6
     7
     8
     9
     1
     2
     3
     4
     5
     6
     7
     8
     9
     1
     2
     3
     4
     5
     6
     7
     8
     9
     0
     1
     2
     3
     4
     5
     6
     7
     8
     9
     1
     2
     3
     4
     5
     6
     7
     8
     9
     0
     0


rfht2 = 

  <a href="matlab:help containers.Map">containers.Map</a> <a href="matlab:help handle">handle</a>
  Package: containers

  Properties:
        Count: 22
      KeyType: 'int64'
    ValueType: 'any'

  <a href="matlab:methods('containers.Map')">Methods</a>, <a href="matlab:events('containers.Map')">Events</a>, <a href="matlab:superclasses('containers.Map')">Superclasses</a>


master2rr_pt2 =

     1     2     7    11    12    13    14    15    16    17
     2     7     6    19    18    20    21    11    12    22
     2     3     6    23    24    20    21    25    26    27
     4     3     6    23    24    28    29    31    30    32
     4     5     6    33    34    28    29    35    36    37
    10     5     6     0     0     0     0     0     0     0
     6    10     7    39    38    18    19    40    41    42
     1     7     8    43    44    45    46    13    14    47
     8     7     9     0     0     0     0     0     0     0
     7     9    10     0     0     0     0     0     0     0


ans =

Press any key to continue


size_p_refref3 =

     9     2


size_t_refref3 =

    10     3


px_refref3 = 

    @(px)ifte(length(px)==3,px,[1])


refref2d_3 = 

            p: [9x2 double]
            t: [10x3 double]
         npts: [7x1 double]
        flist: [7x3 double]
      Brefref: []
    pxfeature: @(px)ifte(length(px)==3,px,[1])


p_ref3 =

         0         0
    1.5000         0
    2.5000         0
    3.5000         0
    3.5000    1.0000
    2.5000    0.7000
    1.5000    1.0000
         0    1.0000
    1.5000    2.0000
    2.5000    1.5000
    1.5000    0.5000
    0.7500    0.5000
    0.7500         0
    0.5000    0.1667
    1.2500    0.1667
    1.2500    0.6667
    2.0000    0.8500
    2.0000    0.3500
    1.6667    0.2833
    2.1667    0.6333
    1.6667    0.7833
    2.5000    0.3500
    2.0000         0
    1.8333    0.1167
    2.3333    0.1167
    2.3333    0.4667
    3.0000    0.3500
    3.0000         0
    2.6667    0.1167
    3.1667    0.1167
    2.6667    0.4667
    3.0000    0.8500
    3.5000    0.5000
    3.3333    0.2833
    3.3333    0.7833
    2.8333    0.6333
    2.0000    1.2500
    2.5000    1.1000
    2.3333    0.8833
    1.8333    1.0333
    2.3333    1.2833
    0.7500    1.0000
         0    0.5000
    0.2500    0.3333
    1.0000    0.8333
    0.2500    0.8333


t_ref3 =

     1    14    13
    13    14    15
    13    15     2
    14    12     1
    14    12    16
    14    15    16
    15    16    11
     2    11    15
    12    16     7
    16    11     7
     2    19    11
    11    19    21
    11    21     7
    19    18     2
    19    18    20
    19    21    20
    21    20    17
     7    17    21
    18    20     6
    20    17     6
     2    24    23
    23    24    25
    23    25     3
    24    18     2
    24    18    26
    24    25    26
    25    26    22
     3    22    25
    18    26     6
    26    22     6
     4    30    28
    28    30    29
    28    29     3
    30    27     4
    30    27    31
    30    29    31
    29    31    22
     3    22    29
    27    31     6
    31    22     6
     4    34    33
    33    34    35
    33    35     5
    34    27     4
    34    27    36
    34    35    36
    35    36    32
     5    32    35
    27    36     6
    36    32     6
    10     5     6
     6    39    38
    38    39    41
    38    41    10
    39    17     6
    39    17    40
    39    41    40
    41    40    37
    10    37    41
    17    40     7
    40    37     7
     1    44    12
    12    44    45
    12    45     7
    44    43     1
    44    43    46
    44    45    46
    45    46    42
     7    42    45
    43    46     8
    46    42     8
     8     7     9
     7     9    10


master_ref3 =

  Columns 1 through 15

     1     1     1     1     1     1     1     1     1     1     2     2     2     2     2

  Columns 16 through 30

     2     2     2     2     2     3     3     3     3     3     3     3     3     3     3

  Columns 31 through 45

     4     4     4     4     4     4     4     4     4     4     5     5     5     5     5

  Columns 46 through 60

     5     5     5     5     5     6     7     7     7     7     7     7     7     7     7

  Columns 61 through 73

     7     8     8     8     8     8     8     8     8     8     8     9    10


idx_refref3 =

     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
     0
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
     1
     2
     3
     4
     5
     6
     7
     8
     9
    10
     0
     0


rfht3 = 

  <a href="matlab:help containers.Map">containers.Map</a> <a href="matlab:help handle">handle</a>
  Package: containers

  Properties:
        Count: 22
      KeyType: 'int64'
    ValueType: 'any'

  <a href="matlab:methods('containers.Map')">Methods</a>, <a href="matlab:events('containers.Map')">Events</a>, <a href="matlab:superclasses('containers.Map')">Superclasses</a>


master2rr_pt3 =

     1     2     7    11    12    13    14    15    16
     2     7     6    17    18    11    19    21    20
     2     3     6    22    18    23    24    25    26
     4     3     6    22    27    28    30    29    31
     4     5     6    32    27    33    34    35    36
    10     5     6     0     0     0     0     0     0
     6    10     7    37    17    38    39    41    40
     1     7     8    42    43    12    44    45    46
     8     7     9     0     0     0     0     0     0
     7     9    10     0     0     0     0     0     0

help get_internal_boundary2d
  function [bedges,bnodes,t_idx1,t_idx2] = get_internal_boundary2d(t,t_list)
 
  Returns the boundary between the triangles in t_list and its complement.
  t_list is a list of row indexes i into t(i,j)
  bedges is an m x 2 array listing the edges in the boundary.
  bnodes is a  p x 1 array listing the nodes in the boundary.
  t_idx1(i) is the triangle containing bedges(i) in t_list.
  t_idx2(i) is the triangle containing bedges(i) in the complement of t_list.

[be,bn,t_idx1,t_idx2] = get_internal_boundary2d(t,master)
{Undefined function or variable 't'.
} 
[be,bn,t_idx1,t_idx2] = get_internal_boundary2d(t_testref,master)

be =

     5     6
     6    10
     7     8
     7    10


bn =

     5
     6
     7
     8
    10


t_idx1 =

     5     7     8     7


t_idx2 =

     6     6     9    10

master

master =

     1     2     3     4     5     7     8

master2rr_pt2

master2rr_pt2 =

     1     2     7    11    12    13    14    15    16    17
     2     7     6    19    18    20    21    11    12    22
     2     3     6    23    24    20    21    25    26    27
     4     3     6    23    24    28    29    31    30    32
     4     5     6    33    34    28    29    35    36    37
    10     5     6     0     0     0     0     0     0     0
     6    10     7    39    38    18    19    40    41    42
     1     7     8    43    44    45    46    13    14    47
     8     7     9     0     0     0     0     0     0     0
     7     9    10     0     0     0     0     0     0     0

master2rr_pt2(t_idx1,:)

ans =

     4     5     6    33    34    28    29    35    36    37
     6    10     7    39    38    18    19    40    41    42
     1     7     8    43    44    45    46    13    14    47
     6    10     7    39    38    18    19    40    41    42

cnpts = cumsum(refref2d_2.npts)

cnpts =

     1
     2
     3
     5
     7
     9
    10

be

be =

     5     6
     6    10
     7     8
     7    10

t_idx1

t_idx1 =

     5     7     8     7

t(t_idx1,:)
{Undefined variable t.
} 
t_testref(t_idx1,:)

ans =

     4     5     6
     6    10     7
     1     7     8
     6    10     7

help subset_scan
  function idx = subset_scan(list1,list2)
 
  Returns index list idx where
  if idx(i) != 0 then list1(i) == list2(idx(i)), and
  if idx(i) == 0 then list1(i) ~= list2(j) for any j.

idx = subset_scan(be(1,:),t_testref(t_idx1(1),:))

idx =

     2     3

refref2d_2.flist

ans =

     1     0     0
     2     0     0
     3     0     0
     2     3     0
     1     3     0
     1     2     0
     1     2     3

refref2d_2.npts

ans =

     1
     1
     1
     2
     2
     2
     1

subset_scan(idx,refref2d_2,flist(1,:))
{Error using <a href="matlab:helpUtils.errorDocCallback('subset_scan')" style="font-weight:bold">subset_scan</a>
Too many input arguments.
} 
subset_scan(idx,refref2d_2.flist(1,:))

ans =

     0     0

subset_scan(idx,refref2d_2.flist(2,:))

ans =

     1     0

subset_scan(idx,refref2d_2.flist(3,:))

ans =

     0     1

subset_scan(idx,refref2d_2.flist(4,:))

ans =

     1     2

subset_scan(idx,refref2d_2.flist(5,:))

ans =

     0     2

subset_scan(idx,refref2d_2.flist(6,:))

ans =

     2     0

subset_scan(idx,refref2d_2.flist(7
 subset_scan(idx,refref2d_2.flist(7
                                  |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
subset_scan(idx,refref2d_2.flist(7,:))

ans =

     2     3

idx

idx =

     2     3

refref2d_2.flist(7,:)

ans =

     1     2     3

refref2d_2.flist

ans =

     1     0     0
     2     0     0
     3     0     0
     2     3     0
     1     3     0
     1     2     0
     1     2     3

idx

idx =

     2     3

refref2d_2.npts

ans =

     1
     1
     1
     2
     2
     2
     1

list = [2 3 4 5]

list =

     2     3     4     5

master2rr_pt(5,list)

ans =

     5     6    20    18

diary off
[be,bn,t_idx1,t_idx2] = get_internal_boundary2d(t_testref,master)

be =

     5     6
     6    10
     7     8
     7    10


bn =

     5
     6
     7
     8
    10


t_idx1 =

     5     7     8     7


t_idx2 =

     6     6     9    10

idx = subset_scan(be(1,:),t_testref(t_idx1(1),:))

idx =

     2     3

elist = rr_get_redges(idx,rr2)

elist =

     2     4
     3     5
     4     5

idx = subset_scan(be(2,:),t_testref(t_idx1(2),:))

idx =

     1     2

elist = rr_get_redges(idx,rr2)

elist =

     1     8
     2     9
     8     9

idx = subset_scan(be(3,:),t_testref(t_idx1(3),:))

idx =

     2     3

elist = rr_get_redges(idx,rr2)

elist =

     2     4
     3     5
     4     5

elists = cells(3,1)
{Undefined function 'cells' for input arguments of type 'double'.
} 
elists = cell(3,1)

elists = 

    []
    []
    []

reference_edges = [1 2; 2 3; 1 3]

reference_edges =

     1     2
     2     3
     1     3

for i = 1:3
elists{i} = rr_get_redges(reference_edges(i,:),rr2);
end
elists{1}

ans =

     1     8
     2     9
     8     9

elists{2}

ans =

     2     4
     3     5
     4     5

elists{3}

ans =

     1     6
     3     7
     6     7

elists

elists = 

    [3x2 double]
    [3x2 double]
    [3x2 double]

help isequal
 <strong>isequal</strong> True if arrays are numerically equal.
    <strong>isequal</strong>(A,B) returns logical 1 (TRUE) if arrays A and B are the same
    size and contain the same values, and logical 0 (FALSE) otherwise.
    
    If A is defined and you set B = A, <strong>isequal</strong>(A,B) is not necessarily
    true. If A or B contains a NaN element, <strong>isequal</strong> returns false because
    NaNs are not equal to each other by definition.
 
    <strong>isequal</strong>(A,B,C,...) returns logical 1 if all the input arguments are
    numerically equal, and logical 0 otherwise.
 
    When comparing numeric values, <strong>isequal</strong> does not consider the class 
    of the values in determining whether they are equal. In other words, 
    INT8(5) and SINGLE(5) are considered equal. This is also true when
    comparing numeric values with certain nonnumeric values. Numeric 1 
    is equal to logical 1. The number 65 is equal to the character 'A'.
 
    When comparing handle objects, use EQ or the == operator to test
    whether objects are the same handle. Use <strong>isequal</strong> to test if objects
    have equal property values, even if those objects are different
    handles.
 
    <strong>isequal</strong> recursively compares the contents of cell arrays and
    structures.  If all the elements of a cell array or structure are
    numerically equal, <strong>isequal</strong> returns 1.
 
    When comparing structures, the order in which the fields of the 
    structures were created is not important. As long as the structures 
    contain the same fields, with corresponding fields set to equal values,
    isequal considers the structures to be equal.
 
    See also <a href="matlab:help isequalwithequalnans">isequalwithequalnans</a>, <a href="matlab:help eq">eq</a>.

    Overloaded methods:
       <a href="matlab:help matlab.desktop.editor.Document/isequal">matlab.desktop.editor.Document/isequal</a>
       <a href="matlab:help MException/isequal">MException/isequal</a>
       <a href="matlab:help timer/isequal">timer/isequal</a>
       <a href="matlab:help serial/isequal">serial/isequal</a>
       <a href="matlab:help daqdevice/isequal">daqdevice/isequal</a>
       <a href="matlab:help daqchild/isequal">daqchild/isequal</a>
       <a href="matlab:help codistributed/isequal">codistributed/isequal</a>
       <a href="matlab:help fints/isequal">fints/isequal</a>
       <a href="matlab:help imaqdevice/isequal">imaqdevice/isequal</a>
       <a href="matlab:help imaqchild/isequal">imaqchild/isequal</a>
       <a href="matlab:help iviconfigurationstore/isequal">iviconfigurationstore/isequal</a>
       <a href="matlab:help icgroup/isequal">icgroup/isequal</a>
       <a href="matlab:help instrument/isequal">instrument/isequal</a>
       <a href="matlab:help categorical/isequal">categorical/isequal</a>
       <a href="matlab:help laurpoly/isequal">laurpoly/isequal</a>
       <a href="matlab:help laurmat/isequal">laurmat/isequal</a>

    Reference page in Help browser
       <a href="matlab:doc isequal">doc isequal</a>

[elist,rrtlist] = rr_get_redges([1,2],rr2)

elist =

     1     8
     8     9
     2     9


rrtlist =

     1     3     5

figure(3)
trimesh_labelled(rr2.p,rr2.t(rrtlist,:))
axis([-.2 1.2 -.2 1.2])
